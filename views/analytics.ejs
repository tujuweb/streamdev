<% layout('layout') -%>
<div class="flex-1 p-3 pt-6 sm:p-4 sm:pt-8 md:p-6 md:pt-12 lg:pt-6">
  <div class="max-w-7xl mx-auto">      
    <!-- Header -->
    <div class="flex flex-col mb-6">      
      <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between">
        <div>
          <h1 class="text-2xl font-bold text-white">Video Analytics <span id="videoCount" class="text-gray-400 text-2xl font-normal"><% if (videos && videos.length > 0) { %>(<%= videos.length %>)<% } %></span></h1>
        </div>      
        <div class="hidden sm:flex items-center gap-2 mt-4 sm:mt-0">        
          <button id="addVideoBtn" class="w-24 h-10 bg-primary hover:bg-secondary px-4 py-2 rounded-lg font-medium transition-colors text-sm flex items-center justify-center gap-2" style="display: none;">
            <i class="ti ti-plus"></i>
            <span>Add</span>
          </button>        
          <button id="clearAllAnalyticsBtn" class="w-24 h-10 bg-red-600 hover:bg-red-700 text-white px-4 py-2 rounded-lg font-medium transition-colors text-sm flex items-center justify-center gap-2" style="display: none;">
            <i class="ti ti-trash"></i> <span>Clear</span>
          </button>
        </div>
      </div>
      <!-- Mobile buttons - full width -->
      <div class="flex sm:hidden gap-2 mt-4 w-full">        
        <button id="addVideoBtnMobile" class="flex-1 h-10 bg-primary hover:bg-secondary px-4 py-2 rounded-lg font-medium transition-colors text-sm flex items-center justify-center gap-2" style="display: none;">
          <i class="ti ti-plus"></i>
          <span>Add</span>
        </button>        
        <button id="clearAllAnalyticsBtnMobile" class="flex-1 h-10 bg-red-600 hover:bg-red-700 text-white px-4 py-2 rounded-lg font-medium transition-colors text-sm flex items-center justify-center gap-2" style="display: none;">
          <i class="ti ti-trash"></i> <span>Clear</span>
        </button>
      </div>
    </div>
    <!-- Video Analytics Container -->
    <div id="analyticsContainer" class="space-y-4">
      <!-- Analytics cards will be populated here -->
    </div>    
    <!-- Pagination Controls -->
    <div id="paginationControls" class="hidden flex items-center justify-center mt-6 gap-2">
      <button id="prevBtn" class="w-9 h-9 flex items-center justify-center bg-dark-700 hover:bg-dark-600 rounded-lg transition-colors disabled:opacity-50 disabled:cursor-not-allowed">
        <i class="ti ti-chevron-left"></i>
      </button>
      
      <button id="pageNumber" class="px-3 h-9 flex items-center justify-center bg-primary text-white rounded-lg font-medium text-sm min-w-[60px]">1/1</button>

      <button id="nextBtn" class="w-9 h-9 flex items-center justify-center bg-dark-700 hover:bg-dark-600 rounded-lg transition-colors disabled:opacity-50 disabled:cursor-not-allowed">
        <i class="ti ti-chevron-right"></i>
      </button>
    </div>

    <!-- Empty State -->
    <div id="emptyState" class="text-center py-12">
      <div class="max-w-md mx-auto">
        <div class="w-16 h-16 bg-gray-700 rounded-full flex items-center justify-center mx-auto mb-4">
          <i class="ti ti-chart-line text-2xl text-gray-400"></i>
        </div>
        <h3 class="text-lg font-medium text-gray-400 mb-2">No videos added yet</h3>
        <p class="text-gray-400 mb-6">Add YouTube videos to start monitoring their analytics and performance metrics.</p>
        <button id="addFirstVideoBtn" class="bg-primary hover:bg-secondary px-6 py-2 rounded-lg font-medium transition-colors">
          <i class="ti ti-plus mr-2"></i>
          Add Your First Video
        </button>
      </div>
    </div>
  </div>
</div>

<!-- Add Video Modal -->
<div id="addVideoModal" class="fixed inset-0 bg-black bg-opacity-50 z-50 hidden items-center justify-center p-4">
  <div class="bg-dark-800 rounded-lg max-w-md w-full p-6">
    <div class="flex items-center justify-between mb-4">
      <h3 class="text-lg font-semibold text-white">Add Video for Analytics</h3>
      <button id="closeModal" class="text-gray-400 hover:text-white">
        <i class="ti ti-x text-xl"></i>
      </button>
    </div>
    
    <form id="addVideoForm">
      <div class="mb-4">
        <label for="videoUrl" class="block text-sm font-medium text-gray-300 mb-2">YouTube Video URL</label>        
        <input 
          type="text" 
          id="videoUrl" 
          name="url" 
          placeholder="https://www.youtube.com/watch?v=..." 
          class="w-full px-3 py-2 bg-dark-700 border border-gray-600 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:border-primary"
          required
        >        
        <p class="text-xs text-gray-400 mt-1">Supported formats:</p>
        <ul class="text-xs sm:text-xs text-gray-500 mt-1 space-y-1">
            <li class="break-all text-[10px] sm:text-xs">• https://studio.youtube.com/video/tNkZsRW7h2c/livestreaming</li>
            <li class="break-all text-[10px] sm:text-xs">• https://www.youtube.com/live/tNkZsRW7h2c?feature=share</li>
            <li class="break-all text-[10px] sm:text-xs">• https://www.youtube.com/watch?v=tNkZsRW7h2c</li>
            <li class="break-all text-[10px] sm:text-xs">• https://youtube.com/watch?v=tNkZsRW7h2c</li>
            <li class="break-all text-[10px] sm:text-xs">• https://youtu.be/tNkZsRW7h2c</li>
        </ul>
      </div>
      
      <div id="urlError" class="hidden mb-4 p-3 bg-red-900/20 border border-red-500/30 rounded-lg">
        <div class="flex items-start">
          <i class="ti ti-exclamation-circle text-red-400 mr-2 mt-0.5"></i>
          <div>
            <p class="text-red-400 text-sm" id="urlErrorMessage"></p>
          </div>
        </div>
      </div>
        <div class="flex gap-3 justify-end">
        <button type="button" id="cancelBtn" class="px-4 py-2.5 bg-dark-700 hover:bg-dark-600 text-gray-300 rounded-lg transition-colors text-sm font-medium flex items-center">
          <i class="ti ti-x mr-1.5"></i>
          Cancel
        </button>        
        <button type="submit" id="submitBtn" class="px-4 py-2 bg-primary hover:bg-secondary rounded-lg font-medium transition-colors">
          <span id="submitText">Add Video</span>
        </button>
      </div>
    </form>  </div>
</div>

<!-- Analytics Card Template -->
<template id="analyticsCardTemplate">
  <div class="bg-dark-800 rounded-lg p-6 border border-gray-700" data-video-id="">
    <div class="flex flex-col lg:flex-row gap-6">      
      <!-- Video Info -->
      <div class="flex-shrink-0 lg:w-80">        
        <div class="relative aspect-video">
          <img class="video-thumbnail w-full h-full object-cover rounded-lg" src="" alt="Video thumbnail">
          <!-- Remove Button -->
          <button class="remove-video-btn absolute top-2 left-2 w-8 h-8 bg-red-600 hover:bg-red-700 text-white rounded-lg transition-colors flex items-center justify-center">
            <i class="ti ti-trash text-sm"></i>
          </button>        
        </div>
        <div class="mt-3">
          <h3 class="video-title font-semibold text-white text-sm line-clamp-2 cursor-pointer hover:text-blue-400 transition-colors"></h3>
          <p class="video-channel text-xs text-gray-400 mt-1"></p>
        </div>
      </div>

      <!-- Analytics Data -->
      <div class="flex-1">        
        <div class="grid grid-cols-2 lg:grid-cols-4 gap-3 sm:gap-4 mb-4">            
          <!-- Views -->
          <div class="bg-dark-700 rounded-lg p-3 sm:p-4 text-center relative">
            <div class="text-blue-400 text-xl sm:text-2xl mb-1">
              <i class="ti ti-eye"></i>
            </div>
            <div class="video-views-diff text-xs font-medium absolute top-2 right-2"></div>
            <div class="video-views text-base sm:text-lg font-semibold text-white min-h-[2rem] flex items-center justify-center">0</div>
            <div class="text-xs text-gray-400 mt-1">Total Views</div>
          </div>          
          <!-- Likes -->
          <div class="bg-dark-700 rounded-lg p-3 sm:p-4 text-center relative">
            <div class="text-green-400 text-xl sm:text-2xl mb-1">
              <i class="ti ti-thumb-up"></i>
            </div>
            <div class="video-likes-diff text-xs font-medium absolute top-2 right-2"></div>
            <div class="video-likes text-base sm:text-lg font-semibold text-white min-h-[2rem] flex items-center justify-center">0</div>
            <div class="text-xs text-gray-400 mt-1">Likes</div>
          </div>          
          <!-- Dislikes -->
          <div class="bg-dark-700 rounded-lg p-3 sm:p-4 text-center relative">
            <div class="text-red-400 text-xl sm:text-2xl mb-1">
              <i class="ti ti-thumb-down"></i>
            </div>
            <div class="video-dislikes-diff text-xs font-medium absolute top-2 right-2"></div>
            <div class="video-dislikes text-base sm:text-lg font-semibold text-white min-h-[2rem] flex items-center justify-center">0</div>
            <div class="text-xs text-gray-400 mt-1">Dislikes</div>
          </div>          
          <!-- Live Viewers -->
          <div class="bg-dark-700 rounded-lg p-3 sm:p-4 text-center relative">
            <div class="text-amber-400 text-xl sm:text-2xl mb-1">
              <i class="ti ti-users"></i>
            </div>
            <div class="live-viewers-diff text-xs font-medium absolute top-2 right-2"></div>
            <div class="live-viewers text-base sm:text-lg font-semibold text-white min-h-[2rem] flex items-center justify-center">N/A</div>
            <div class="text-xs text-gray-400 mt-1">Live Viewers</div>
          </div>
        </div>        
        <!-- Additional Stats -->
        <div class="grid grid-cols-1 lg:grid-cols-4 gap-4 text-sm">
          <div class="bg-dark-700 rounded-lg p-3">
            <div class="flex items-center justify-between">
              <span class="text-gray-400">Video ID:</span>
              <span class="video-id text-white font-mono text-xs"></span>
            </div>
          </div>
          <div class="bg-dark-700 rounded-lg p-3">
            <div class="flex items-center justify-between">
              <span class="text-gray-400">Status:</span>
              <span class="video-status text-white flex items-center"></span>
            </div>
          </div>
          <div class="bg-dark-700 rounded-lg p-3">
            <div class="flex items-center justify-between">
              <span class="text-gray-400">Uploaded:</span>
              <span class="video-upload-info text-white text-xs"></span>
            </div>
          </div>          
          <div class="bg-dark-700 rounded-lg p-3">
            <div class="flex items-center justify-between">
              <span class="text-gray-400">Video Age:</span>
              <span class="video-age text-white text-xs"></span>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</template>

<script>
class VideoAnalyticsManager {  constructor() {
    this.videos = new Map();
    this.refreshInterval = null;
    this.currentPage = 0;
    this.videosPerPage = this.getVideosPerPage();
    this.init();
    this.setupResizeListener();
  }

  getVideosPerPage() {
    return window.innerWidth >= 1024 ? 2 : 1;
  }

  setupResizeListener() {
    window.addEventListener('resize', () => {
      const newVideosPerPage = this.getVideosPerPage();
      if (newVideosPerPage !== this.videosPerPage) {
        this.videosPerPage = newVideosPerPage;
        this.currentPage = Math.floor(this.currentPage * (this.videosPerPage === 1 ? 2 : 0.5));
        this.updateDisplay();
      }
    });
  }
  async init() {
    this.bindEvents();
    await this.startAutoRefresh();
  }  
  bindEvents() {
    const addVideoBtn = document.getElementById('addVideoBtn');
    const addVideoBtnMobile = document.getElementById('addVideoBtnMobile');
    const addFirstVideoBtn = document.getElementById('addFirstVideoBtn');
    const closeModal = document.getElementById('closeModal');
    const cancelBtn = document.getElementById('cancelBtn');
    const addVideoForm = document.getElementById('addVideoForm');

    [addVideoBtn, addVideoBtnMobile, addFirstVideoBtn].forEach(btn => {
      btn?.addEventListener('click', () => this.showAddVideoModal());
    });

    [closeModal, cancelBtn].forEach(btn => {
      btn?.addEventListener('click', () => this.hideAddVideoModal());
    });

    addVideoForm?.addEventListener('submit', (e) => this.handleAddVideo(e));

    document.getElementById('addVideoModal')?.addEventListener('click', (e) => {
      if (e.target === e.currentTarget) {
        this.hideAddVideoModal();
      }
    });
    document.getElementById('prevBtn')?.addEventListener('click', () => this.previousPage());
    document.getElementById('nextBtn')?.addEventListener('click', () => this.nextPage());
  }

  showAddVideoModal() {
    const modal = document.getElementById('addVideoModal');
    modal?.classList.remove('hidden');
    modal?.classList.add('flex');
    document.getElementById('videoUrl')?.focus();
  }

  hideAddVideoModal() {
    const modal = document.getElementById('addVideoModal');
    modal?.classList.add('hidden');
    modal?.classList.remove('flex');
    this.clearForm();
  }

  clearForm() {
    document.getElementById('addVideoForm')?.reset();
    this.hideError();
    this.resetSubmitButton();
  }  
  updateClearButtonVisibility() {
    const clearBtn = document.getElementById('clearAllAnalyticsBtn');
    const clearBtnMobile = document.getElementById('clearAllAnalyticsBtnMobile');
    const addBtn = document.getElementById('addVideoBtn');
    const addBtnMobile = document.getElementById('addVideoBtnMobile');
    
    if (this.videos.size > 0) {
      if (clearBtn) clearBtn.style.display = 'flex';
      if (clearBtnMobile) clearBtnMobile.style.display = 'flex';
      if (addBtn) addBtn.style.display = 'flex';
      if (addBtnMobile) addBtnMobile.style.display = 'flex';
    } else {
      if (clearBtn) clearBtn.style.display = 'none';
      if (clearBtnMobile) clearBtnMobile.style.display = 'none';
      if (addBtn) addBtn.style.display = 'none';
      if (addBtnMobile) addBtnMobile.style.display = 'none';
    }
    this.updateVideoCount();
  }

  updateVideoCount() {
    const videoCountElement = document.getElementById('videoCount');
    if (videoCountElement) {
      if (this.videos.size > 0) {
        videoCountElement.textContent = `(${this.videos.size})`;
      } else {
        videoCountElement.textContent = '';
      }
    }
  }

  showError(message) {
    const errorDiv = document.getElementById('urlError');
    const errorMessage = document.getElementById('urlErrorMessage');
    errorMessage.textContent = message;
    errorDiv?.classList.remove('hidden');
  }

  hideError() {
    document.getElementById('urlError')?.classList.add('hidden');
  }  setSubmitLoading(loading) {
    const button = document.getElementById('submitBtn');
    const text = document.getElementById('submitText');
    
    if (loading) {
      button.disabled = true;
      text.textContent = 'Adding...';
    } else {
      button.disabled = false;
      text.textContent = 'Add Video';
    }
  }

  resetSubmitButton() {
    this.setSubmitLoading(false);
  }  
  async handleAddVideo(e) {
    e.preventDefault();
    
    const formData = new FormData(e.target);
    const url = formData.get('url');
    
    this.hideError();
    this.setSubmitLoading(true);

    try {
      const response = await fetch('/api/analytics/add-video-db', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ url })
      });      const result = await response.json();

      if (!result.success) {
        this.showError(result.error);
        this.setSubmitLoading(false);
        return;
      }

      showToast('success', 'Video added to analytics successfully');
      setTimeout(() => {
        window.location.reload();
      }, 1000);

    } catch (error) {
      console.error('Error adding video:', error);
      this.showError('Failed to add video. Please try again.');
    } finally {
      this.setSubmitLoading(false);
    }
  }  
  addVideo(videoData) {
    this.videos.set(videoData.videoId, videoData);
    const totalVideos = this.videos.size;
    this.currentPage = Math.ceil(totalVideos / this.videosPerPage) - 1;
    this.updateClearButtonVisibility();
  }async removeVideo(videoId) {
    const video = this.videos.get(videoId);
    const videoTitle = video ? video.title : 'this video';
    
    const result = await createModalDialog({
      type: 'danger',
      title: 'Remove Video',
      message: `Are you sure you want to remove "${videoTitle}" from analytics tracking? This action cannot be undone.`,
      confirmText: 'Remove',
      cancelText: 'Cancel'
    });

    if (result.confirmed) {
      try {
        const response = await fetch(`/api/analytics/video/${videoId}`, {
          method: 'DELETE'
        });        
        const result = await response.json();        
        if (result.success) {
          showToast('success', 'Video removed from analytics successfully');
          this.videos.delete(videoId);
          this.updateClearButtonVisibility();
          this.updateDisplay();
          
          const totalVideos = this.videos.size;
          const totalPages = Math.ceil(totalVideos / this.videosPerPage);
          if (this.currentPage >= totalPages && totalPages > 0) {
            this.currentPage = totalPages - 1;
          }
          
          this.updateDisplay();
        } else {
          console.error('Failed to remove video:', result.error);
          showToast('error', 'Failed to remove video from analytics');
        }
      } catch (error) {
        console.error('Error removing video:', error);
      }
    }
  }
  saveToLocalStorage() {
  }
  async loadFromDatabase() {
    try {
      const response = await fetch('/api/analytics/videos');
      const result = await response.json();
        if (result.success) {
        this.videos.clear();
        result.data.forEach(video => {
          this.videos.set(video.videoId, video);
        });
        
        if (result.data.length === 0) {
          await this.migrateFromLocalStorage();
        }
        
        this.updateClearButtonVisibility();
      } else {
        console.error('Failed to load videos from database:', result.error);
      }
    } catch (error) {
      console.error('Error loading videos from database:', error);
    }
  }

  async migrateFromLocalStorage() {
    try {
      const saved = localStorage.getItem('analyticsVideos');
      if (saved) {
        const videosArray = JSON.parse(saved);
        console.log(`Found ${videosArray.length} videos in localStorage, migrating to database...`);
        
        for (const video of videosArray) {
          try {
            const videoId = video.videoId;
            if (videoId) {
              const videoUrl = `https://www.youtube.com/watch?v=${videoId}`;
              
              const response = await fetch('/api/analytics/add-video-db', {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json',
                },
                body: JSON.stringify({ url: videoUrl })
              });

              const result = await response.json();
              if (result.success) {
                this.videos.set(videoId, result.data);
              } else {
                console.error(`Failed to migrate video ${videoId}:`, result.error);
              }
            }
          } catch (error) {
            console.error('Error migrating individual video:', error);
          }
        }
        
        if (this.videos.size > 0) {
          localStorage.removeItem('analyticsVideos');
          console.log('Migration completed, localStorage cleared');
        }
      }
    } catch (error) {
      console.error('Error during migration from localStorage:', error);
    }
  }
  updateDisplay() {
    const container = document.getElementById('analyticsContainer');
    const emptyState = document.getElementById('emptyState');
    const paginationControls = document.getElementById('paginationControls');
    const addVideoBtn = document.getElementById('addVideoBtn');    
    if (this.videos.size === 0) {
      container.innerHTML = '';
      emptyState?.classList.remove('hidden');
      paginationControls?.classList.add('hidden');
      addVideoBtn.style.display = 'none'; 
    } else {
      emptyState?.classList.add('hidden');
      addVideoBtn.style.display = 'block'; 
      this.renderCurrentVideo();
      this.updatePaginationControls();
      paginationControls?.classList.remove('hidden');
    }
  }
  renderCurrentVideo() {
    const container = document.getElementById('analyticsContainer');
    const template = document.getElementById('analyticsCardTemplate');
    
    container.innerHTML = '';

    const videosArray = Array.from(this.videos.values());
    const totalPages = Math.ceil(videosArray.length / this.videosPerPage);
    
    if (this.currentPage >= totalPages) {
      this.currentPage = Math.max(0, totalPages - 1);
    }
    if (this.currentPage < 0) {
      this.currentPage = 0;
    }

    const startIndex = this.currentPage * this.videosPerPage;
    const endIndex = Math.min(startIndex + this.videosPerPage, videosArray.length);

    for (let i = startIndex; i < endIndex; i++) {
      const video = videosArray[i];
      const card = template.content.cloneNode(true);
      this.populateCard(card, video);
      container.appendChild(card);
    }
  }  
  updatePaginationControls() {
    const videosArray = Array.from(this.videos.values());
    const totalVideos = videosArray.length;
    const totalPages = Math.ceil(totalVideos / this.videosPerPage);
    
    const prevBtn = document.getElementById('prevBtn');
    const nextBtn = document.getElementById('nextBtn');
    
    if (prevBtn) {
      prevBtn.disabled = this.currentPage <= 0;
    }
    if (nextBtn) {
      nextBtn.disabled = this.currentPage >= totalPages - 1;
    }

    const pageNumber = document.getElementById('pageNumber');    
    if (pageNumber) {
      pageNumber.textContent = `${this.currentPage + 1}/${totalPages}`;
    }
  }

  previousPage() {
    if (this.currentPage > 0) {
      this.currentPage--;
      this.renderCurrentVideo();
      this.updatePaginationControls();
    }
  }  
  nextPage() {
    const totalVideos = this.videos.size;
    const totalPages = Math.ceil(totalVideos / this.videosPerPage);
    if (this.currentPage < totalPages - 1) {
      this.currentPage++;
      this.renderCurrentVideo();
      this.updatePaginationControls();    }
  }

  populateCard(card, video) {
    card.querySelector('[data-video-id]').setAttribute('data-video-id', video.videoId);
    card.querySelector('.video-thumbnail').src = video.thumbnail;    card.querySelector('.video-title').textContent = video.title;
    card.querySelector('.video-channel').textContent = video.channelName;
    
    card.querySelector('.video-views').textContent = this.formatNumber(video.analytics.viewCount);
    card.querySelector('.video-likes').textContent = this.formatNumber(video.analytics.likes);
    card.querySelector('.video-dislikes').textContent = this.formatNumber(video.analytics.dislikes);
    card.querySelector('.live-viewers').textContent = video.analytics.currentViewers ? this.formatNumber(video.analytics.currentViewers) : 'N/A';    
    const previousData = this.getPreviousData(video.videoId);
    
    if (previousData) {
      this.updateDifferenceDisplay(card, '.video-views-diff', video.analytics.viewCount, previousData.viewCount);
      this.updateDifferenceDisplay(card, '.video-likes-diff', video.analytics.likes, previousData.likes);
      this.updateDifferenceDisplay(card, '.video-dislikes-diff', video.analytics.dislikes, previousData.dislikes);
      this.updateDifferenceDisplay(card, '.live-viewers-diff', video.analytics.currentViewers, previousData.currentViewers);
    }
    
    this.storePreviousData(video.videoId, {
      viewCount: video.analytics.viewCount,
      likes: video.analytics.likes,
      dislikes: video.analytics.dislikes,
      currentViewers: video.analytics.currentViewers
    });
    
    card.querySelector('.video-id').textContent = video.videoId;
      const statusElement = card.querySelector('.video-status');
    if (video.isLive) {
      statusElement.innerHTML = '<span class="w-2 h-2 bg-red-500 rounded-full animate-pulse mr-2"></span>Live';
    } else {
      statusElement.textContent = 'N/A';
    }
      card.querySelector('.video-upload-info').textContent = this.formatDate(video.uploadDate);
    card.querySelector('.video-age').textContent = this.calculateVideoAge(video.uploadDate);

    card.querySelector('.remove-video-btn').addEventListener('click', () => {
      this.removeVideo(video.videoId);
    });

    card.querySelector('.video-title').addEventListener('click', () => {
      const videoUrl = `https://www.youtube.com/watch?v=${video.videoId}`;
      window.open(videoUrl, '_blank');
    });
  }
  async refreshVideoData() {
    const videosArray = Array.from(this.videos.values());
    const startIndex = this.currentPage * this.videosPerPage;
    const endIndex = Math.min(startIndex + this.videosPerPage, videosArray.length);
    const currentVideos = videosArray.slice(startIndex, endIndex);
    
    const promises = currentVideos.map(async (video) => {
      try {
        const response = await fetch(`/api/analytics/video-db/${video.videoId}`);
        const result = await response.json();
        
        if (result.success) {
          this.videos.set(video.videoId, result.data);
        }
      } catch (error) {
        console.error(`Error refreshing video ${video.videoId}:`, error);
      }
    });

    await Promise.all(promises);
    this.updateDisplay();
  }  
  async startAutoRefresh() {
    await this.loadFromDatabase();
    this.updateDisplay();
    this.updateClearButtonVisibility();
    
    this.refreshInterval = setInterval(() => {
      if (this.videos.size > 0) {
        this.refreshVideoData();
      }
    }, 5000);
  }
  formatNumber(num) {
    if (num === null || num === undefined) return 'N/A';
    if (typeof num === 'string') return num;
    return num.toLocaleString();
  }

  formatDate(dateString) {
    if (!dateString) return 'N/A';
    try {
      return new Date(dateString).toLocaleDateString();
    } catch (error) {
      return 'N/A';
    }
  }
  formatTimeAgo(dateString) {
    if (!dateString) return 'Never';
    try {
      const now = new Date();
      const date = new Date(dateString);
      const diffMs = now - date;
      const diffSecs = Math.floor(diffMs / 1000);
      const diffMins = Math.floor(diffSecs / 60);
      
      if (diffSecs < 60) return `${diffSecs}s ago`;
      if (diffMins < 60) return `${diffMins}m ago`;
      return `${Math.floor(diffMins / 60)}h ago`;
    } catch (error) {
      return 'Unknown';
    }
  }
  calculateVideoAge(dateString) {
    if (!dateString) return 'N/A';
    try {
      const now = new Date();
      const uploadDate = new Date(dateString);
      const diffMs = now - uploadDate;
      
      const diffSecs = Math.floor(diffMs / 1000);
      const diffMins = Math.floor(diffSecs / 60);
      const diffHours = Math.floor(diffMins / 60);
      const diffDays = Math.floor(diffHours / 24);
      const diffMonths = Math.floor(diffDays / 30);
      const diffYears = Math.floor(diffMonths / 12);
      
      if (diffHours < 24) {
        const hours = diffHours;
        const minutes = diffMins % 60;
        if (hours === 0) {
          return `${minutes}m`;
        }
        return `${hours}h ${minutes}m`;
      }
      
      const parts = [];
      
      if (diffYears > 0) {
        parts.push(`${diffYears}y`);
        const remainingMonths = diffMonths % 12;
        if (remainingMonths > 0) {
          parts.push(`${remainingMonths}m`);
        }
        const remainingDays = diffDays % 30;
        if (remainingDays > 0 && parts.length < 3) {
          parts.push(`${remainingDays}d`);
        }
      } else if (diffMonths > 0) {
        parts.push(`${diffMonths}m`);
        const remainingDays = diffDays % 30;
        if (remainingDays > 0) {
          parts.push(`${remainingDays}d`);
        }
      } else {
        parts.push(`${diffDays}d`);
      }
      
      return parts.join(' ');
    } catch (error) {
      return 'N/A';
    }
  }

  storePreviousData(videoId, data) {
    const key = `previousData_${videoId}`;
    localStorage.setItem(key, JSON.stringify(data));
  }

  getPreviousData(videoId) {
    try {
      const key = `previousData_${videoId}`;
      const data = localStorage.getItem(key);
      return data ? JSON.parse(data) : null;
    } catch (error) {
      return null;
    }
  }  
  updateDifferenceDisplay(card, selector, current, previous) {
    const element = card.querySelector(selector);
    
    if (!element) {
      return;
    }
    
    if (previous === null || previous === undefined || current === null || current === undefined || 
        previous === 'N/A' || current === 'N/A' || 
        typeof previous !== 'number' || typeof current !== 'number') {
      element.textContent = '';
      element.className = 'text-xs font-medium absolute top-2 right-2';
      return;
    }
    
    const diff = current - previous;
    if (diff === 0) {
      element.textContent = '';
      element.className = 'text-xs font-medium absolute top-2 right-2';
      return;
    }
    
    const formatted = diff > 0 ? `+${this.formatNumber(diff)}` : this.formatNumber(diff);
    const colorClass = diff > 0 ? 'text-green-400' : 'text-red-400';
    
    element.textContent = formatted;
    element.className = `text-xs font-medium ${colorClass} whitespace-nowrap absolute top-2 right-2`;
  }
}

function createModalDialog(options) {
  return new Promise((resolve) => {
    const dialog = document.createElement('div');
    dialog.id = 'custom-modal';
    dialog.className = 'fixed inset-0 z-50 flex items-center justify-center bg-black/60 backdrop-blur-sm transition-all duration-300';
    
    const themes = {
      'info': {
        icon: options.icon || 'ti-info-circle',
        color: 'text-blue-600',
        bg: 'bg-blue-600/10',
        border: 'border-gray-600/50',
        button: 'bg-blue-600 hover:bg-blue-700',
        buttonIcon: 'ti-check'
      },
      'danger': {
        icon: options.icon || 'ti-alert-triangle',
        color: 'text-red-400',
        bg: 'bg-red-500/10',
        border: 'border-gray-600/50',
        button: 'bg-red-500 hover:bg-red-600',
        buttonIcon: 'ti-trash'
      },
      'warning': {
        icon: options.icon || 'ti-alert-triangle',
        color: 'text-yellow-400',
        bg: 'bg-yellow-500/10',
        border: 'border-yellow-500/50',
        button: 'bg-yellow-500 hover:bg-yellow-600',
        buttonIcon: 'ti-alert-circle'
      }
    };
    
    const theme = themes[options.type || 'info'];
    
    dialog.innerHTML = `
      <div class="transform transition-all duration-300 opacity-0 scale-95 modal-content max-w-md w-full mx-4">
        <div class="bg-dark-800 rounded-lg shadow-xl border ${theme.border} overflow-hidden">
          <div class="px-6 py-5 flex items-center">
            <div class="w-12 h-12 rounded-full ${theme.bg} flex items-center justify-center mr-4 shrink-0">
              <i class="ti ${theme.icon} ${theme.color} text-2xl"></i>
            </div>
            <div class="flex-1">
              <h3 class="text-lg font-medium text-white">${options.title}</h3>
              <p class="text-gray-400 text-sm mt-1">${options.message}</p>
            </div>          
          </div>
          
          <div class="px-6 py-4 flex justify-end space-x-3 border-t border-gray-600/50">
            <button id="modal-cancel-btn" class="px-4 py-2.5 bg-dark-700 hover:bg-dark-600 text-gray-300 rounded-lg transition-colors text-sm font-medium flex items-center">
              <i class="ti ti-x mr-1.5"></i>
              ${options.cancelText || 'Cancel'}
            </button>
            <button id="modal-confirm-btn" class="${options.confirmClass || theme.button} px-4 py-2.5 text-white rounded-lg transition-colors text-sm font-medium flex items-center">
              <i class="ti ${theme.buttonIcon} mr-1.5"></i>
              ${options.confirmText || 'Confirm'}
            </button>
          </div>
        </div>
      </div>
    `;
    
    document.body.appendChild(dialog);
    
    requestAnimationFrame(() => {
      const content = dialog.querySelector('.modal-content');
      content.classList.remove('opacity-0', 'scale-95');
      content.classList.add('opacity-100', 'scale-100');
    });
    
    const cancelBtn = dialog.querySelector('#modal-cancel-btn');
    const confirmBtn = dialog.querySelector('#modal-confirm-btn');
    
    const cleanup = () => {
      dialog.remove();
    };
    
    cancelBtn.addEventListener('click', () => {
      cleanup();
      resolve({ confirmed: false });
    });
    
    confirmBtn.addEventListener('click', () => {
      cleanup();
      resolve({ confirmed: true });
    });
    
    dialog.addEventListener('click', (e) => {
      if (e.target === dialog) {
        cleanup();
        resolve({ confirmed: false });
      }
    });
    
    const handleEscape = (e) => {
      if (e.key === 'Escape') {
        cleanup();
        document.removeEventListener('keydown', handleEscape);
        resolve({ confirmed: false });
      }
    };
    document.addEventListener('keydown', handleEscape);  
  });
}

function showToast(type, message) {
  const toast = document.createElement('div');
  toast.className = 'fixed bottom-4 right-4 bg-dark-800 text-white px-4 py-2 rounded-lg shadow-lg z-50 animate-fade-in';
  
  let iconClass = '';
  if (type === 'success') {
    iconClass = 'ti ti-check text-green-400';
  } else if (type === 'error') {
    iconClass = 'ti ti-x text-red-400';
  } else if (type === 'warning') {
    iconClass = 'ti ti-alert-triangle text-yellow-400';
  } else {
    iconClass = 'ti ti-info-circle text-blue-400';
  }
  
  toast.innerHTML = `
    <div class="flex items-center">
      <i class="${iconClass} mr-2"></i>
      <span>${message}</span>
    </div>
  `;
  document.body.appendChild(toast);
  const style = document.createElement('style');
  style.textContent = `
    @keyframes fadeIn {
      from { opacity: 0; transform: translateY(20px); }
      to { opacity: 1; transform: translateY(0); }
    }
    @keyframes fadeOut {
      from { opacity: 1; transform: translateY(0); }
      to { opacity: 0; transform: translateY(20px); }
    }
    .animate-fade-in {
      animation: fadeIn 0.3s ease-out forwards;
    }
    .animate-fade-out {
      animation: fadeOut 0.3s ease-out forwards;
    }
  `;
  document.head.appendChild(style);
  setTimeout(() => {
    toast.classList.remove('animate-fade-in');
    toast.classList.add('animate-fade-out');
    setTimeout(() => {
      document.body.removeChild(toast);
    }, 300);      
  }, 3000);
}

document.addEventListener('DOMContentLoaded', () => {
  window.analyticsManagerInstance = new VideoAnalyticsManager();
  
  function handleClearAllClick() {
    const manager = window.analyticsManagerInstance;
    if (!manager || manager.videos.size === 0) {
      showToast('info', 'No videos to clear');
      return;
    }
    const ids = Array.from(manager.videos.keys());
    createModalDialog({
      type: 'danger',
      icon: 'ti-trash',
      title: 'Clear All Analytics',
      message: `Are you sure you want to remove all videos from analytics? This action cannot be undone.`,
      confirmText: 'Delete All',
      cancelText: 'Cancel'
    }).then(async result => {
      if (result.confirmed) {
        const modal = document.getElementById('custom-modal');
        if (modal) {
          modal.remove();
        }
        
        const btn = document.getElementById('clearAllAnalyticsBtn');
        const btnMobile = document.getElementById('clearAllAnalyticsBtnMobile');
        
        if (btn) {
          btn.disabled = true;
          btn.classList.add('opacity-60', 'pointer-events-none');
        }
        if (btnMobile) {
          btnMobile.disabled = true;
          btnMobile.classList.add('opacity-60', 'pointer-events-none');
        }
        
        try {
          await Promise.all(ids.map(id => fetch(`/api/analytics/video/${id}`, { method: 'DELETE' }))); 
          manager.videos.clear();
          manager.updateDisplay();
          manager.updateClearButtonVisibility();
          showToast('success', 'All analytics videos removed successfully');
        } catch (e) {
          showToast('error', 'Failed to remove all analytics videos');
        } finally {
          if (btn) {
            btn.disabled = false;
            btn.classList.remove('opacity-60', 'pointer-events-none');
          }
          if (btnMobile) {
            btnMobile.disabled = false;
            btnMobile.classList.remove('opacity-60', 'pointer-events-none');
          }
        }
      }
    });
  }
  
  document.getElementById('clearAllAnalyticsBtn')?.addEventListener('click', handleClearAllClick);
  document.getElementById('clearAllAnalyticsBtnMobile')?.addEventListener('click', handleClearAllClick);
});
</script>

<style>
.line-clamp-2 {
  display: -webkit-box;
  -webkit-line-clamp: 2;
  -webkit-box-orient: vertical;
  overflow: hidden;
  line-clamp: 2;
}

.sidebar-tooltip {
  position: absolute;
  left: 100%;
  margin-left: 0.5rem;
  padding: 0.25rem 0.5rem;
  background-color: var(--dark-700);
  color: white;
  font-size: 0.875rem;
  border-radius: 0.5rem;
  white-space: nowrap;
  opacity: 0;
  transform: scale(0.95);
  transition: all 0.2s;
  pointer-events: none;
  z-index: 50;
}

.sidebar-icon:hover .sidebar-tooltip {
  opacity: 1;
  transform: scale(1);
}

.analytics-card-counter {
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 0.25rem;
  min-height: 2rem;
}

@media (min-width: 640px) {
  .analytics-card-counter {
    gap: 0.5rem;
  }
}

.analytics-diff {
  white-space: nowrap;
  flex-shrink: 0;
}

@media (max-width: 639px) {
  .analytics-grid {
    gap: 0.75rem;
  }
  
  .analytics-card {
    padding: 0.75rem;  
  }
}

</style>

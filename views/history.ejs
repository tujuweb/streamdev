<% layout('layout') -%>  <div class="flex flex-col md:flex-row md:items-center justify-between mb-6 gap-4">
    <div>
      <h2 class="text-2xl font-bold">Stream History<% if (history && history.length > 0) { %> <span class="text-gray-400 font-normal">(<%= history.length %>)</span><% } %></h2>
    </div>
    <div class="flex items-center gap-3">
      <div class="relative flex-1 md:flex-none md:w-64">
        <input type="text" id="history-search" placeholder="Search history..."
          class="bg-dark-700 border border-gray-600 text-white pl-9 pr-4 py-2 rounded-lg focus:outline-none focus:ring-1 focus:ring-primary w-full">
        <i class="ti ti-search absolute left-3 top-1/2 -translate-y-1/2 text-gray-400"></i>
      </div>          
      <div class="relative">
        <button type="button" id="platform-filter-btn"
          class="px-4 py-2 bg-dark-700 border border-gray-600 text-white rounded-lg hover:border-primary focus:border-primary focus:ring-1 focus:ring-primary transition-colors flex items-center gap-2 h-[40px] min-w-[40px] sm:min-w-[140px]">
          <i class="ti ti-apps text-green-400"></i>
          <span id="selected-platform-text" class="hidden sm:inline">All Platforms</span>
          <i class="ti ti-chevron-down text-gray-400 ml-auto hidden sm:inline"></i>
        </button>
        <div id="platform-filter-dropdown"
          class="hidden absolute z-10 right-0 mt-1 w-48 bg-dark-700 rounded-lg border border-gray-600 shadow-lg overflow-hidden">
          <div class="py-1">
            <button type="button" class="platform-filter-option w-full flex items-center px-4 py-2 hover:bg-dark-600" data-platform="all">
              <i class="ti ti-apps text-green-400 text-base mr-2"></i>
              <span class="text-sm">All Platforms</span>
            </button>
            <button type="button" class="platform-filter-option w-full flex items-center px-4 py-2 hover:bg-dark-600" data-platform="YouTube">
              <i class="ti ti-brand-youtube text-red-500 text-base mr-2"></i>
              <span class="text-sm">YouTube</span>
            </button>
            <button type="button" class="platform-filter-option w-full flex items-center px-4 py-2 hover:bg-dark-600" data-platform="Facebook">
              <i class="ti ti-brand-facebook text-blue-500 text-base mr-2"></i>
              <span class="text-sm">Facebook</span>
            </button>
            <button type="button" class="platform-filter-option w-full flex items-center px-4 py-2 hover:bg-dark-600" data-platform="Twitch">
              <i class="ti ti-brand-twitch text-purple-500 text-base mr-2"></i>
              <span class="text-sm">Twitch</span>
            </button>
            <button type="button" class="platform-filter-option w-full flex items-center px-4 py-2 hover:bg-dark-600" data-platform="TikTok">
              <i class="ti ti-brand-tiktok text-gray-100 text-base mr-2"></i>
              <span class="text-sm">TikTok</span>
            </button>
            <button type="button" class="platform-filter-option w-full flex items-center px-4 py-2 hover:bg-dark-600" data-platform="Custom">
              <i class="ti ti-broadcast text-gray-400 text-base mr-2"></i>
              <span class="text-sm">Custom</span>
            </button>
          </div>
        </div>
      </div>
      <button id="clear-all-history" class="px-4 py-2 bg-red-600 hover:bg-red-700 text-white rounded-lg font-medium text-sm transition-colors flex items-center gap-2 h-[40px]<% if (!history || history.length === 0) { %> hidden<% } %>">
        <i class="ti ti-trash"></i> 
        <span class="hidden sm:inline">Clear</span>
      </button>
    </div>
  </div>
  
  <div class="bg-gray-800 rounded-lg shadow-md overflow-hidden">
    <div class="overflow-x-auto">
      <table class="min-w-full divide-y divide-gray-700">        
        <thead class="hidden md:table-header-group">
          <tr class="bg-dark-700">
            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider w-2/5">
              Stream Name
            </th>
            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider w-1/6">
              Platform
            </th>
            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider w-1/6">
              Start Time
            </th>
            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider w-1/6">
              Stop Time
            </th>
            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider w-1/12">
              Duration
            </th>
            <th scope="col" class="px-6 py-3 text-right text-xs font-medium text-gray-400 uppercase tracking-wider w-1/12">
              Actions
            </th>
          </tr>
        </thead><tbody id="history-table-body" class="bg-gray-800 divide-y divide-gray-700">
          <% if (history && history.length> 0) { %>
            <% history.forEach(function(entry) { %>              
              <!-- Desktop View -->
              <tr class="hidden md:table-row hover:bg-dark-700/50 transition-colors" data-id="<%= entry.id %>"
                data-platform="<%= entry.platform %>" data-title="<%= entry.title %>">
                <td class="px-6 py-4">
                  <div class="flex items-start">
                    <div class="w-10 h-6 bg-dark-700 rounded flex-shrink-0 overflow-hidden mr-3 mt-0.5">
                      <% if (entry.thumbnail_path) { %>
                        <img src="<%= entry.thumbnail_path %>" class="w-full h-full object-cover"
                          onerror="this.src='/images/default-thumbnail.jpg'">
                        <% } else { %>
                          <div class="w-full h-full bg-dark-600 flex items-center justify-center">
                            <i class="ti ti-video text-gray-400 text-xs"></i>
                          </div>
                          <% } %>
                    </div>
                    <div class="text-sm font-medium leading-relaxed min-w-0 flex-1">
                      <%= entry.title %>
                    </div>
                  </div>
                </td>
                <td class="px-6 py-4 whitespace-nowrap">
                  <div class="flex items-center">
                    <i class="ti ti-<%= 
                      entry.platform === 'YouTube' ? 'brand-youtube' :
                      entry.platform === 'Facebook' ? 'brand-facebook' :
                      entry.platform === 'Twitch' ? 'brand-twitch' :
                      entry.platform === 'TikTok' ? 'brand-tiktok' :
                      entry.platform === 'Shopee Live' ? 'shopping-bag' :
                      'broadcast'
                    %> <%= 
                      entry.platform === 'YouTube' ? 'text-red-500' :
                      entry.platform === 'Facebook' ? 'text-blue-500' :
                      entry.platform === 'Twitch' ? 'text-purple-500' :
                      entry.platform === 'TikTok' ? 'text-gray-100' :
                      entry.platform === 'Shopee Live' ? 'text-orange-500' :
                      'text-gray-400'
                    %> mr-1.5 text-base"></i>
                    <span class="text-sm">
                      <%= entry.platform || 'Custom' %>
                    </span>
                  </div>
                </td>
                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-400">
                  <%= helpers.formatDateTime(entry.start_time) %>
                </td>
                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-400">
                  <%= helpers.formatDateTime(entry.end_time) %>
                </td>
                <td class="px-6 py-4 whitespace-nowrap text-sm">
                  <%= helpers.formatDuration(entry.duration) %>
                </td>                
                <td class="px-6 py-4 whitespace-nowrap text-right">
                  <div class="flex items-center justify-end space-x-2">
                    <% if (entry.stream_key && entry.rtmp_url) { %>
                    <button onclick="reuseHistoryEntry('<%= entry.id %>', '<%= entry.title %>')"
                      class="p-1.5 text-gray-400 hover:text-green-400 transition-colors"
                      title="Reuse stream configuration">
                      <i class="ti ti-recycle"></i>
                    </button>
                    <% } %>
                    <button onclick="deleteHistoryEntry('<%= entry.id %>', '<%= entry.title %>')"
                      class="p-1.5 text-gray-400 hover:text-red-400 transition-colors">
                      <i class="ti ti-trash"></i>
                    </button>
                  </div>
                </td>
              </tr>
              <% }); %>
            <% } else { %>
              <!-- Desktop Empty State -->
              <tr class="hidden md:table-row">
                <td colspan="6" class="px-6 py-10 text-center text-gray-400">
                  <div class="flex flex-col items-center">
                    <i class="ti ti-history text-3xl mb-2"></i>
                    <p>No stream history found</p>
                    <p class="text-xs mt-1">Your completed streams will appear here</p>
                  </div>
                </td>
              </tr>
            <% } %>
        </tbody>
      </table>
      
      <!-- Mobile Cards View -->
      <div class="md:hidden p-4 space-y-4">
        <% if (history && history.length> 0) { %>
          <% history.forEach(function(entry) { %>
            <div class="bg-dark-700 rounded-lg p-4 shadow-md hover:bg-dark-600/50 transition-colors" data-id="<%= entry.id %>"
              data-platform="<%= entry.platform %>" data-title="<%= entry.title %>">
              
              <!-- Row 1: Thumbnail, Title, Actions + Platform Icon -->
              <div class="flex items-start justify-between mb-3">
                <div class="flex items-start flex-1 min-w-0">
                  <div class="w-12 h-7 bg-dark-800 rounded flex-shrink-0 overflow-hidden mr-3">
                    <% if (entry.thumbnail_path) { %>
                      <img src="<%= entry.thumbnail_path %>" class="w-full h-full object-cover"
                        onerror="this.src='/images/default-thumbnail.jpg'">
                    <% } else { %>
                      <div class="w-full h-full bg-dark-600 flex items-center justify-center">
                        <i class="ti ti-video text-gray-400 text-xs"></i>
                      </div>
                    <% } %>
                  </div>
                  <div class="flex-1 min-w-0 pr-2">
                    <div class="text-sm font-medium text-white truncate">
                      <%= entry.title %>
                    </div>
                  </div>
                </div>
                <div class="flex items-center space-x-2 ml-2">
                  <% if (entry.stream_key && entry.rtmp_url) { %>
                  <button onclick="reuseHistoryEntry('<%= entry.id %>', '<%= entry.title %>')"
                    class="p-2 text-gray-400 hover:text-green-400 transition-colors"
                    title="Reuse stream configuration">
                    <i class="ti ti-recycle text-base"></i>
                  </button>
                  <% } %>
                  <button onclick="deleteHistoryEntry('<%= entry.id %>', '<%= entry.title %>')"
                    class="p-2 text-gray-400 hover:text-red-400 transition-colors">
                    <i class="ti ti-trash text-base"></i>
                  </button>
                  <!-- Platform Icon - After Delete Button -->
                  <div class="ml-2">
                    <i class="ti ti-<%= 
                      entry.platform === 'YouTube' ? 'brand-youtube' :
                      entry.platform === 'Facebook' ? 'brand-facebook' :
                      entry.platform === 'Twitch' ? 'brand-twitch' :
                      entry.platform === 'TikTok' ? 'brand-tiktok' :
                      entry.platform === 'Shopee Live' ? 'shopping-bag' :
                      'broadcast'
                    %> <%= 
                      entry.platform === 'YouTube' ? 'text-red-500' :
                      entry.platform === 'Facebook' ? 'text-blue-500' :
                      entry.platform === 'Twitch' ? 'text-purple-500' :
                      entry.platform === 'TikTok' ? 'text-gray-100' :
                      entry.platform === 'Shopee Live' ? 'text-orange-500' :
                      'text-gray-400'
                    %> text-base"></i>
                  </div>
                </div>
              </div>
              
              <!-- Row 2: Time Information - Labels (Left Aligned) -->
              <div class="grid grid-cols-3 gap-4 text-xs mb-1">
                <div class="text-yellow-400 font-medium">
                  Duration
                </div>
                <div class="text-green-400 font-medium">
                  Start Time
                </div>
                <div class="text-red-400 font-medium">
                  Stop Time
                </div>
              </div>
              
              <!-- Row 3: Time Values (Left Aligned, Full Format) -->
              <div class="grid grid-cols-3 gap-4 text-xs text-gray-300">
                <div>
                  <%= helpers.formatDuration(entry.duration) %>
                </div>
                <div>
                  <%= helpers.formatDateTime(entry.start_time) %>
                </div>
                <div>
                  <%= helpers.formatDateTime(entry.end_time) %>
                </div>
              </div>
            </div>
          <% }); %>
        <% } else { %>
          <!-- Mobile Empty State -->
          <div class="bg-dark-700 rounded-lg p-8 text-center text-gray-400">
            <div class="flex flex-col items-center">
              <i class="ti ti-history text-3xl mb-2"></i>
              <p>No stream history found</p>
              <p class="text-xs mt-1">Your completed streams will appear here</p>
            </div>
          </div>
        <% } %>
      </div>
    </div>
  </div>
  <script>    
    function getPlatformIcon(platform) {
      switch (platform) {
        case 'YouTube': return 'brand-youtube';        
        case 'Facebook': return 'brand-facebook';
        case 'Twitch': return 'brand-twitch';
        case 'TikTok': return 'brand-tiktok';
        case 'Shopee Live': return 'shopping-bag';
        default: return 'broadcast';
      }
    }    
    function getPlatformColor(platform) {
      switch (platform) {
        case 'YouTube': return 'red-500';        
        case 'Facebook': return 'blue-500';
        case 'Twitch': return 'purple-500';
        case 'TikTok': return 'gray-100';
        case 'Shopee Live': return 'orange-500';
        default: return 'gray-400';
      }
    }
    function formatDateTime(isoString) {
      if (!isoString) return '--';
      const date = new Date(isoString);
      return date.toLocaleString('en-US', {
        year: 'numeric',
        month: 'short',
        day: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
      });
    }
    function formatDuration(seconds) {
      if (!seconds) return '--';
      const hours = Math.floor(seconds / 3600).toString().padStart(2, '0');
      const minutes = Math.floor((seconds % 3600) / 60).toString().padStart(2, '0');
      const secs = Math.floor(seconds % 60).toString().padStart(2, '0');
      return `${hours}:${minutes}:${secs}`;    
    }    
    function updateHistoryCount() {
      const historyRows = document.querySelectorAll('#history-table-body tr[data-id], .md\\:hidden div[data-id]');
      const count = historyRows.length / 2;
      const countSpan = document.querySelector('h2 span.text-gray-400');
      const clearBtn = document.getElementById('clear-all-history');
      
      if (count > 0) {
        if (countSpan) {
          countSpan.textContent = `(${count})`;
        }
        if (clearBtn) {
          clearBtn.classList.remove('hidden');
        }
      } else {
        if (countSpan) {
          countSpan.textContent = '';
        }
        if (clearBtn) {
          clearBtn.classList.add('hidden');
        }
      }
    }

    function deleteHistoryEntry(id, title) {
      createModalDialog({
        type: 'danger',
        icon: 'ti-trash',
        title: 'Delete History Entry',
        message: `Are you sure you want to delete the history entry for "${title}"? This action cannot be undone.`,
        confirmText: 'Delete',
        cancelText: 'Cancel'      }).then(result => {
        if (result.confirmed) {
          const modal = document.getElementById('custom-modal');
          if (modal) {
            const modalContent = modal.querySelector('.modal-content');
            if (modalContent) {
              modalContent.classList.replace('opacity-100', 'opacity-0');
              modalContent.classList.replace('scale-100', 'scale-95');
            }
            setTimeout(() => {
              document.body.classList.remove('overflow-hidden');
              modal.remove();
            }, 200);
          }
          
          fetch(`/api/history/${id}`, {
            method: 'DELETE',
            headers: {
              'Content-Type': 'application/json'
            }
          })
            .then(response => response.json())
            .then(data => {              
              if (data.success) {
                showToast('success', 'History entry deleted successfully');                
                const rows = document.querySelectorAll(`tr[data-id="${id}"], div[data-id="${id}"]`);
                if (rows.length > 0) {
                  rows.forEach(row => {
                    row.classList.add('animate-fade-out');
                    setTimeout(() => {
                      row.remove();
                    }, 300);
                  });
                  
                  setTimeout(() => {
                    updateHistoryCount();
                    
                    const tableBody = document.getElementById('history-table-body');
                    const mobileContainer = document.querySelector('.md\\:hidden.p-4');
                    if (tableBody.children.length === 0 && mobileContainer.children.length === 0) {
                      tableBody.innerHTML = `
                      <!-- Desktop Empty State -->
                      <tr class="hidden md:table-row">
                        <td colspan="6" class="px-6 py-10 text-center text-gray-400">
                          <div class="flex flex-col items-center">
                            <i class="ti ti-history text-3xl mb-2"></i>
                            <p>No stream history found</p>
                            <p class="text-xs mt-1">Your completed streams will appear here</p>
                          </div>
                        </td>
                      </tr>
                    `;
                      mobileContainer.innerHTML = `
                      <!-- Mobile Empty State -->
                      <div class="bg-dark-700 rounded-lg p-8 text-center text-gray-400">
                        <div class="flex flex-col items-center">
                          <i class="ti ti-history text-3xl mb-2"></i>
                          <p>No stream history found</p>
                          <p class="text-xs mt-1">Your completed streams will appear here</p>
                        </div>
                      </div>
                    `;
                    }
                  }, 350);
                }
              } else {
                showToast('error', 'Error: ' + (data.error || 'Failed to delete history entry'));
              }
            })
            .catch(error => {
              console.error('Error:', error);
              showToast('error', 'An error occurred while deleting history entry');
            });
        }
      });
    }      
    document.addEventListener('DOMContentLoaded', function () {
      const searchInput = document.getElementById('history-search');
      const platformFilterBtn = document.getElementById('platform-filter-btn');
      const platformFilterDropdown = document.getElementById('platform-filter-dropdown');
      const selectedPlatformText = document.getElementById('selected-platform-text');
      
      let currentPlatformFilter = 'all';
      
      platformFilterBtn.addEventListener('click', function(e) {
        e.stopPropagation();
        platformFilterDropdown.classList.toggle('hidden');
      });
      
      document.addEventListener('click', function(e) {
        if (!platformFilterBtn.contains(e.target) && !platformFilterDropdown.contains(e.target)) {
          platformFilterDropdown.classList.add('hidden');
        }
      });
      
      const platformOptions = document.querySelectorAll('.platform-filter-option');      
      platformOptions.forEach(option => {
        option.addEventListener('click', function() {
          const platform = this.getAttribute('data-platform');
          const iconElement = this.querySelector('i');
          const text = this.querySelector('span').textContent;
          
          currentPlatformFilter = platform;
          
          const btnIcon = platformFilterBtn.querySelector('i:first-child');
          
          const iconClasses = iconElement.className.split(' ');
          const tiIconClass = iconClasses.find(cls => cls.startsWith('ti-') && cls !== 'ti');
          const colorClass = iconClasses.find(cls => cls.startsWith('text-'));
          
          btnIcon.className = `ti ${tiIconClass} ${colorClass}`;
          selectedPlatformText.textContent = text;
          
          platformFilterDropdown.classList.add('hidden');
          
          filterTable();
        });
      });
      function filterTable() {
        const searchTerm = searchInput.value.toLowerCase();
        const platform = currentPlatformFilter;
        const rows = document.querySelectorAll('#history-table-body tr[data-id], .md\\:hidden div[data-id]');
        
        rows.forEach(row => {
          const title = row.getAttribute('data-title').toLowerCase();
          const rowPlatform = row.getAttribute('data-platform');
          const matchesSearch = !searchTerm || title.includes(searchTerm);
          const matchesPlatform = platform === 'all' || rowPlatform === platform;
          row.style.display = matchesSearch && matchesPlatform ? '' : 'none';
        });        
        
        const visibleRows = document.querySelectorAll('#history-table-body tr[data-id]:not([style*="display: none"]), .md\\:hidden div[data-id]:not([style*="display: none"])');
        const allRows = document.querySelectorAll('#history-table-body tr[data-id], .md\\:hidden div[data-id]');
        
        if (visibleRows.length === 0 && allRows.length > 0 && !document.getElementById('empty-search-results-desktop') && !document.getElementById('empty-search-results-mobile')) {
          const tableBody = document.getElementById('history-table-body');
          const mobileContainer = document.querySelector('.md\\:hidden.p-4');
          
          const newEmptyRowDesktop = document.createElement('tr');
          newEmptyRowDesktop.id = 'empty-search-results-desktop';
          newEmptyRowDesktop.className = 'hidden md:table-row';
          newEmptyRowDesktop.innerHTML = `
          <td colspan="6" class="px-6 py-10 text-center text-gray-400">
            <div class="flex flex-col items-center">
              <i class="ti ti-search text-3xl mb-2"></i>
              <p>No matching results found</p>
              <p class="text-xs mt-1">Try adjusting your search or filter</p>
            </div>
          </td>
        `;
          
          const newEmptyCardMobile = document.createElement('div');
          newEmptyCardMobile.id = 'empty-search-results-mobile';
          newEmptyCardMobile.className = 'bg-dark-700 rounded-lg p-8 text-center text-gray-400';
          newEmptyCardMobile.innerHTML = `
          <div class="flex flex-col items-center">
            <i class="ti ti-search text-3xl mb-2"></i>
            <p>No matching results found</p>
            <p class="text-xs mt-1">Try adjusting your search or filter</p>
          </div>
        `;
          
          tableBody.appendChild(newEmptyRowDesktop);
          mobileContainer.appendChild(newEmptyCardMobile);
        } else if (visibleRows.length > 0) {
          const searchEmptyDesktop = document.getElementById('empty-search-results-desktop');
          const searchEmptyMobile = document.getElementById('empty-search-results-mobile');
          if (searchEmptyDesktop) searchEmptyDesktop.remove();
          if (searchEmptyMobile) searchEmptyMobile.remove();
        }
      }
      
      searchInput.addEventListener('input', filterTable);
    });
    function showToast(type, message) {
      const toast = document.createElement('div');
      toast.className = 'fixed bottom-4 right-4 bg-dark-800 text-white px-4 py-2 rounded-lg shadow-lg z-50 animate-fade-in';
      
      let iconClass = '';
      if (type === 'success') {
        iconClass = 'ti ti-check text-green-400';
      } else if (type === 'error') {
        iconClass = 'ti ti-x text-red-400';
      } else if (type === 'warning') {
        iconClass = 'ti ti-alert-triangle text-yellow-400';
      } else {
        iconClass = 'ti ti-info-circle text-blue-400';
      }
      
      toast.innerHTML = `
      <div class="flex items-center">
        <i class="${iconClass} mr-2"></i>
        <span>${message}</span>
      </div>
    `;
      document.body.appendChild(toast);
      const style = document.createElement('style');
      style.textContent = `
      @keyframes fadeIn {
        from { opacity: 0; transform: translateY(20px); }
        to { opacity: 1; transform: translateY(0); }
      }
      @keyframes fadeOut {
        from { opacity: 1; transform: translateY(0); }
        to { opacity: 0; transform: translateY(20px); }
      }
      .animate-fade-in {
        animation: fadeIn 0.3s ease-out forwards;
      }
      .animate-fade-out {
        animation: fadeOut 0.3s ease-out forwards;
      }
    `;
      document.head.appendChild(style);
      setTimeout(() => {
        toast.classList.remove('animate-fade-in');
        toast.classList.add('animate-fade-out');
        setTimeout(() => {
          document.body.removeChild(toast);
        }, 300);      
      }, 3000);
    }

    function createModalDialog(options) {
      const dialog = document.createElement('div');
      dialog.id = 'custom-modal';
      dialog.className = 'fixed inset-0 z-50 flex items-center justify-center bg-black/60 backdrop-blur-sm transition-all duration-300';
      
      const themes = {
        'info': {
          icon: options.icon || 'ti-info-circle',
          color: 'text-blue-600',
          bg: 'bg-blue-600/10',
          border: 'border-gray-600/50',
          button: 'bg-blue-600 hover:bg-blue-700',
          buttonIcon: 'ti-check'
        },
        'danger': {
          icon: options.icon || 'ti-alert-triangle',
          color: 'text-red-400',
          bg: 'bg-red-500/10',
          border: 'border-gray-600/50',
          button: 'bg-red-500 hover:bg-red-600',
          buttonIcon: 'ti-trash'
        },
        'warning': {
          icon: options.icon || 'ti-alert-triangle',
          color: 'text-yellow-400',
          bg: 'bg-yellow-500/10',
          border: 'border-yellow-500/50',
          button: 'bg-yellow-500 hover:bg-yellow-600',
          buttonIcon: 'ti-alert-circle'
        },
      };
      
      const theme = themes[options.type || 'info'];
      
      dialog.innerHTML = `
        <div class="transform transition-all duration-300 opacity-0 scale-95 modal-content max-w-md w-full mx-4">
          <div class="bg-dark-800 rounded-lg shadow-xl border ${theme.border} overflow-hidden">
            
            <div class="px-6 py-5 flex items-center">
              <div class="w-12 h-12 rounded-full ${theme.bg} flex items-center justify-center mr-4 shrink-0">
                <i class="ti ${theme.icon} ${theme.color} text-2xl"></i>
              </div>
              <div class="flex-1">
                <h3 class="text-lg font-medium text-white">${options.title}</h3>
                <p class="text-gray-400 text-sm mt-1">${options.message}</p>
              </div>
            </div>
            
            <div class="px-6 py-4 flex justify-end space-x-3 border-t border-gray-600/50">
              <button id="modal-cancel-btn" class="px-4 py-2.5 bg-dark-700 hover:bg-dark-600 text-gray-300 rounded-lg transition-colors text-sm font-medium flex items-center">
                <i class="ti ti-x mr-1.5"></i>
                ${options.cancelText || 'Cancel'}
              </button>
              <button id="modal-confirm-btn" class="${options.confirmClass || theme.button} px-4 py-2.5 text-white rounded-lg transition-colors text-sm font-medium flex items-center">
                <i class="ti ${theme.buttonIcon} mr-1.5"></i>
                ${options.confirmText || 'Confirm'}
              </button>
            </div>
          </div>
        </div>
      `;
      
      document.body.appendChild(dialog);
      document.body.classList.add('overflow-hidden');
      
      setTimeout(() => {
        const modalContent = dialog.querySelector('.modal-content');
        if (modalContent) {
          modalContent.classList.replace('opacity-0', 'opacity-100');
          modalContent.classList.replace('scale-95', 'scale-100');
        }
      }, 10);
      
      return new Promise((resolve) => {
        document.getElementById('modal-confirm-btn').addEventListener('click', () => {
          resolve({ confirmed: true, closeNow: false });
        });
        
        document.getElementById('modal-cancel-btn').addEventListener('click', () => {
          closeModalWithAnimation();
        });
        
        document.addEventListener('keydown', function escapeHandler(e) {
          if (e.key === 'Escape') {
            closeModalWithAnimation();
            document.removeEventListener('keydown', escapeHandler);
          }
        });
        
        dialog.addEventListener('click', function (e) {
          if (e.target === dialog) {
            closeModalWithAnimation();
          }
        });
        
        function closeModalWithAnimation(confirmed = false) {
          const modalContent = dialog.querySelector('.modal-content');
          if (modalContent) {
            modalContent.classList.replace('opacity-100', 'opacity-0');
            modalContent.classList.replace('scale-100', 'scale-95');
          }
          setTimeout(() => {
            document.body.classList.remove('overflow-hidden');
            dialog.remove();
            resolve({ confirmed, closeNow: true });
          }, 200);
        }
      });
    }    
    document.getElementById('clear-all-history').addEventListener('click', async function() {
      const rows = Array.from(document.querySelectorAll('#history-table-body tr[data-id], .md\\:hidden div[data-id]'));
      if (rows.length === 0) {
        showToast('info', 'No history to clear');
        return;
      }
      const ids = [...new Set(rows.map(row => row.getAttribute('data-id')))];
      createModalDialog({
        type: 'danger',
        icon: 'ti-trash',
        title: 'Clear All History',
        message: `Are you sure you want to delete all history entries? This action cannot be undone.`,
        confirmText: 'Delete All',
        cancelText: 'Cancel'
      }).then(async result => {
        if (result.confirmed) {
          const modal = document.getElementById('custom-modal');
          if (modal) {
            document.body.classList.remove('overflow-hidden');
            modal.remove();
          }
          const btn = document.getElementById('clear-all-history');
          btn.disabled = true;
          btn.classList.add('opacity-60', 'pointer-events-none');
          try {
            await Promise.all(ids.map(id => fetch(`/api/history/${id}`, { method: 'DELETE', headers: { 'Content-Type': 'application/json' } }) ));
            rows.forEach(row => {
              row.classList.add('animate-fade-out');
              setTimeout(() => row.remove(), 300);
            });              
            setTimeout(() => {
              const tableBody = document.getElementById('history-table-body');
              const mobileContainer = document.querySelector('.md\\:hidden.p-4');
              tableBody.innerHTML = `
                <!-- Desktop Empty State -->
                <tr class="hidden md:table-row">
                  <td colspan="6" class="px-6 py-10 text-center text-gray-400">
                    <div class="flex flex-col items-center">
                      <i class="ti ti-history text-3xl mb-2"></i>
                      <p>No stream history found</p>
                      <p class="text-xs mt-1">Your completed streams will appear here</p>
                    </div>
                  </td>
                </tr>
              `;
              mobileContainer.innerHTML = `
                <!-- Mobile Empty State -->
                <div class="bg-dark-700 rounded-lg p-8 text-center text-gray-400">
                  <div class="flex flex-col items-center">
                    <i class="ti ti-history text-3xl mb-2"></i>
                    <p>No stream history found</p>
                    <p class="text-xs mt-1">Your completed streams will appear here</p>
                  </div>
                </div>
              `;
              updateHistoryCount();
            }, 350);
            showToast('success', 'All history entries deleted successfully');
          } catch (e) {
            showToast('error', 'Failed to delete all history entries');
          } finally {            
            btn.disabled = false;
            btn.classList.remove('opacity-60', 'pointer-events-none');
          }
        }
      });
    });

    function reuseHistoryEntry(historyId, title) {
      createModalDialog({
        type: 'info',
        icon: 'ti-recycle',
        title: 'Reuse Stream Configuration',
        message: `Reuse the stream configuration from "${title}"? This will create a new stream with the same settings.`,
        confirmText: 'Reuse',
        cancelText: 'Cancel'
      }).then(result => {
        if (result.confirmed) {
          const modal = document.getElementById('custom-modal');
          if (modal) {
            const modalContent = modal.querySelector('.modal-content');
            if (modalContent) {
              modalContent.classList.replace('opacity-100', 'opacity-0');
              modalContent.classList.replace('scale-100', 'scale-95');
            }
            setTimeout(() => {
              document.body.classList.remove('overflow-hidden');
              modal.remove();
            }, 200);
          }
          
          fetch(`/api/history/reuse/${historyId}`, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            }
          })
            .then(response => response.json())
            .then(data => {
              if (data.success) {
                showToast('success', 'Stream configuration reused successfully');
                window.location.href = '/dashboard';
              } else {
                showToast('error', 'Error: ' + (data.error || 'Failed to reuse stream configuration'));
              }
            })
            .catch(error => {
              console.error('Error:', error);
              showToast('error', 'An error occurred while reusing stream configuration');
            });
        }
      });
    }

  </script>  
  <style>
    #platform-filter-dropdown {
      transform-origin: top right;
      transition: transform 0.2s, opacity 0.2s;
      transform: scale(0.95);
      opacity: 0;
    }
    #platform-filter-dropdown:not(.hidden) {
      transform: scale(1);
      opacity: 1;
    }
    .platform-filter-option:hover i {
      transform: scale(1.1);
    }
    .platform-filter-option i {
      transition: transform 0.2s;
    }
    #platform-filter-btn i:first-child {
      transition: color 0.2s;
    }
    
    .min-w-full {
      table-layout: fixed;
    }
    
    @media (min-width: 768px) {
      .min-w-full td:first-child {
        word-wrap: break-word;
        word-break: break-word;
        hyphens: auto;
        max-width: 0;
      }
    }
    
    @media (max-width: 640px) {
      #platform-filter-btn {
        padding: 8px;
        gap: 0;
        justify-content: center;
        width: 40px;
        min-width: 40px;
        font-weight: 500;
        font-size: 0.875rem;
      }
      
      .grid-cols-3 {
        display: grid;
        grid-template-columns: 1fr 1fr 1fr;
      }
      
      .bg-dark-700:hover {
        background-color: rgb(55 65 81 / 0.5);
      }
    }
  </style>
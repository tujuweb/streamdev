<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>
    <%= title %> - StreamFlow v2
  </title>
  <link rel="icon" href="/images/logo.svg" type="image/svg+xml">
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
  <script src="https://cdn.tailwindcss.com"></script>
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@tabler/icons-webfont@2.30.0/tabler-icons.min.css">
  <link rel="stylesheet" href="/css/styles.css">
  <link href="https://vjs.zencdn.net/7.20.3/video-js.css" rel="stylesheet" />
  <script src="https://vjs.zencdn.net/7.20.3/video.min.js"></script>
  <script>
    tailwind.config = {
      darkMode: 'class',
      theme: {
        fontFamily: {
          'inter': ['Inter', 'sans-serif'],
          'sans': ['Inter', 'system-ui', 'sans-serif']
        },
        extend: {
          colors: {
            'primary': '#0055FF',
            'secondary': '#0043CA',
            'dark': {
              '900': '#121212',
              '800': '#252525',
              '700': '#2D2D2D',
              '600': '#3D3D3D',
              '500': '#6E6E6E',
              '400': '#8F8F8F',
              '300': '#AFAFAF',
              '200': '#CFCFCF',
              '100': '#E5E5E5',
            },
            'gray': {
              '900': '#121212',
              '800': '#252525',
              '700': '#2D2D2D',
              '600': '#3D3D3D',
              '500': '#6E6E6E',
              '400': '#8F8F8F',
              '300': '#AFAFAF',
              '200': '#CFCFCF',
              '100': '#E5E5E5',
              '50': '#F5F5F5',
            }
          }
        }
      }
    }
  </script>
</head>
<body class="bg-dark-900 text-white font-inter">
  <div
    class="lg:hidden fixed top-0 left-0 right-0 h-16 bg-dark-800 shadow-lg flex items-center justify-between px-4 z-30">
    <div class="flex items-center">
      <a href="https://github.com/bangtutorial/streamflow" target="_blank" class="hover:opacity-80 transition-opacity">
        <img src="/images/logo_mobile.svg" alt="StreamFlow Logo" class="h-8">
      </a>
    </div>    
    <div class="flex items-center gap-1">
      <a href="https://donate.youtube101.id/" target="_blank" 
         class="p-2 text-gray-400 hover:text-white transition-colors">
        <i class="ti ti-gift text-lg"></i>
      </a>
      <a href="/updates" class="p-2 <%= active === 'updates' ? 'text-amber-400' : 'text-gray-400' %> hover:text-white transition-colors">
        <i class="ti ti-sparkles text-lg"></i>
      </a>
      <div class="relative">
        <button id="mobile-notification-btn" class="p-2 text-gray-400 hover:text-white transition-colors relative">
          <i class="ti ti-bell text-lg"></i>
          <span class="hidden absolute top-0.5 right-0.5 w-2 h-2 bg-red-500 rounded-full"></span>
        </button>
      </div>
    </div>
  </div>
  <div class="flex">
    <div class="hidden lg:flex lg:fixed lg:flex-col w-20 h-screen pt-2 bg-dark-800 shadow-lg overflow-hidden">
      <div class="flex items-center justify-center h-14 w-14 mx-auto mb-4">
        <a href="https://github.com/bangtutorial/streamflow" target="_blank" class="hover:opacity-80 transition-opacity">
          <img src="/images/logo.svg" alt="StreamFlow Logo" class="w-9 h-9">
        </a>
      </div>
      <div class="flex-1">
        <a href="/dashboard" class="sidebar-icon group <%= active === 'dashboard' ? 'bg-primary' : '' %>">
          <i class="ti ti-broadcast text-xl"></i>
          <span class="text-xs mt-1">Streams</span>
          <span class="sidebar-tooltip group-hover:scale-100">Stream Manager</span>
        </a>
        <a href="/gallery" class="sidebar-icon group <%= active === 'gallery' ? 'bg-primary' : '' %>">
          <i class="ti ti-video text-xl"></i>
          <span class="text-xs mt-1">Gallery</span>
          <span class="sidebar-tooltip group-hover:scale-100">Video Gallery</span>
        </a>        
        <a href="/history" class="sidebar-icon group <%= active === 'history' ? 'bg-primary' : '' %>">
          <i class="ti ti-history text-xl"></i>
          <span class="text-xs mt-1">History</span>
          <span class="sidebar-tooltip group-hover:scale-100">Stream History</span>
        </a>
        <a href="/analytics" class="sidebar-icon group <%= active === 'analytics' ? 'bg-primary' : '' %>">
          <i class="ti ti-chart-line text-xl"></i>
          <span class="text-xs mt-1">Analytics</span>
          <span class="sidebar-tooltip group-hover:scale-100">Video Analytics</span>
        </a>
        <a href="/logs" class="sidebar-icon group <%= active === 'logs' ? 'bg-primary' : '' %>">
          <i class="ti ti-file-text text-xl"></i>
          <span class="text-xs mt-1">Logs</span>
          <span class="sidebar-tooltip group-hover:scale-100">System Logs</span>
        </a>      
      </div>
      <div class="mt-auto">        
        <div class="relative" id="updates-menu-container">
          <div class="h-20 flex items-center justify-center px-3 py-4 hover:bg-dark-700/50 transition-colors">
            <a href="/updates" class="w-12 h-12 rounded-full flex items-center justify-center overflow-hidden transition-all">
              <i class="ti ti-sparkles text-xl <%= active === 'updates' ? 'text-amber-400' : 'text-gray-300' %> hover:text-white transition-colors"></i>
            </a>
          </div>
        </div>
        <div class="h-px bg-gray-700 w-full"></div>
        <div class="relative" id="profile-menu-container">
          <div class="h-20 flex items-center justify-center px-3 py-4 hover:bg-dark-700/50 transition-colors">
            <button id="profile-menu-button"
              class="w-12 h-12 rounded-full flex items-center justify-center overflow-hidden ring-2 ring-gray-700 hover:ring-primary transition-all">
              <%- helpers.getAvatar(req) %>
            </button>
          </div>
        </div>
      </div>
    </div>
    <div id="profile-dropdown" class="fixed bg-dark-800 shadow-xl border border-gray-700 hidden">
      <div class="px-4 py-2 border-b border-gray-700">
        <div class="font-medium">
          <%= helpers.getUsername(req) %>
        </div>
      </div>
      <a href="/settings"
        class="flex items-center px-4 py-2.5 text-sm text-gray-300 hover:bg-dark-700 hover:text-white transition-colors">
        <i class="ti ti-settings mr-3"></i>
        <span>Settings</span>
      </a>
      <a href="https://github.com/bangtutorial/streamflow/issues"
        class="flex items-center px-4 py-2.5 text-sm text-gray-300 hover:bg-dark-700 hover:text-white transition-colors" target="_blank">
        <i class="ti ti-help mr-3"></i>
        <span>Help & Support</span>
      </a>
      <div class="h-px bg-gray-700 mx-4"></div>
      <a href="/logout" class="flex items-center px-4 py-2.5 text-sm text-logout hover:bg-dark-700 transition-colors">
        <i class="ti ti-logout mr-3"></i>
        <span>Sign Out</span>
      </a>
    </div>
    <div class="w-full lg:ml-20 flex flex-col min-h-screen">      
      <div
        class="hidden lg:fixed lg:flex top-0 right-0 left-20 items-center justify-end h-14 px-6 bg-dark-800 shadow-md z-[10000]">
        <a href="https://github.com/bangtutorial/streamflow" target="_blank"
          class="p-2 text-gray-400 hover:text-white transition-colors mr-2">
          <i class="ti ti-brand-github text-lg"></i>
        </a>
        <div class="relative">
          <button id="notification-btn" class="p-2 text-gray-400 hover:text-white transition-colors relative">
            <i class="ti ti-bell text-lg"></i>
            <span class="hidden absolute top-0.5 right-0.5 w-2 h-2 bg-red-500 rounded-full"></span>
          </button>          
          <div id="notification-dropdown"
            class="hidden absolute right-0 mt-1 w-80 bg-dark-800 border border-gray-700 rounded-lg shadow-xl z-[10001]">
            <div class="p-3 border-b border-gray-700">
              <h3 class="font-medium">Notifications</h3>
            </div>            
            <div class="max-h-80 overflow-y-auto" id="notification-list">
              <!-- Notifications will be loaded dynamically -->
            </div>
          </div>
        </div>
      </div>
      <div class="p-6 pt-20 lg:pt-22 flex-1">
        <%- body %>
      </div>
      <div class="hidden lg:flex justify-end pr-6 py-4">
        <div class="flex items-center gap-2">
          <div class="text-xs text-gray-500">
            StreamFlow <span class="text-xs font-medium bg-gray-700 px-1 rounded">v2.0</span>
          </div>
          <div class="h-3 w-px bg-gray-700"></div>
          <a href="https://youtube.com/@bangtutorial" target="_blank" class="text-xs text-gray-500 hover:underline">by
            Bang Tutorial</a>
          <a href="https://donate.youtube101.id/" target="_blank" class="kirim-tip-button relative ml-1">
            <span class="relative z-10 flex items-center gap-1 text-white font-medium px-1.5 py-0.5 text-xs">
              <i class="ti ti-heart text-white"></i>
              <span>Donate</span>
            </span>
            <div
              class="kirim-tip-tooltip px-3 py-2 bg-white text-gray-800 text-xs rounded-lg shadow-lg whitespace-nowrap">
              Terima kasih sudah bantu support üôè
              <div class="tooltip-arrow"></div>
            </div>
          </a>
        </div>
      </div>
    </div>
  </div>
  <div class="lg:hidden fixed bottom-0 left-0 right-0 bg-dark-800 border-t border-gray-700 shadow-lg z-30">
    <nav class="flex justify-around items-center h-16">
      <a href="/dashboard" class="bottom-nav-item <%= active === 'dashboard' ? 'bottom-nav-active' : '' %>">
        <i class="ti ti-broadcast"></i>
        <span>Streams</span>
      </a>
      <a href="/gallery" class="bottom-nav-item <%= active === 'gallery' ? 'bottom-nav-active' : '' %>">
        <i class="ti ti-video"></i>
        <span>Gallery</span>
      </a>      
      <a href="/history" class="bottom-nav-item <%= active === 'history' ? 'bottom-nav-active' : '' %>">
        <i class="ti ti-history"></i>
        <span>History</span>
      </a>
      <a href="/analytics" class="bottom-nav-item <%= active === 'analytics' ? 'bottom-nav-active' : '' %>">
        <i class="ti ti-chart-line"></i>
        <span>Analytics</span>
      </a>
      <button id="mobile-profile-btn" class="bottom-nav-item">
        <div class="relative">
          <div class="w-6 h-6 rounded-full overflow-hidden mx-auto">
            <%- helpers.getAvatar(req) %>
          </div>
        </div>
        <span>Profile</span>
      </button>
    </nav>
    <div id="mobile-profile-popup"
      class="fixed bottom-16 right-2 bg-dark-800 rounded-lg shadow-xl border border-gray-700 overflow-hidden hidden transform transition-all duration-200 ease-out opacity-0 translate-y-4 w-40">
      <div class="py-2 px-3">
        <div class="text-sm font-medium mb-1">
          <%= helpers.getUsername(req) %>
        </div>
        <div class="text-xs text-gray-400 mb-2">
          <%= req.session.email || '' %>
        </div>
        <div class="h-px bg-gray-700 my-2"></div>
        <a href="/settings" class="flex items-center py-2 text-gray-300 hover:text-white text-sm">
          <i class="ti ti-settings mr-2"></i>
          <span>Settings</span>
        </a>
        <a href="/logs" class="flex items-center py-2 text-gray-300 hover:text-white text-sm">
          <i class="ti ti-file-text mr-2"></i>
          <span>Logs</span>
        </a>
        <a href="/logout" class="flex items-center py-2 text-red-400 hover:text-red-300 text-sm">
          <i class="ti ti-logout mr-2"></i>
          <span>Sign Out</span>
        </a>
      </div>
    </div>
  </div>  
  <div id="mobile-notification-popup"
    class="fixed bottom-16 right-2 bg-dark-800 rounded-lg shadow-xl border border-gray-700 overflow-hidden hidden transform transition-all duration-200 ease-out opacity-0 translate-y-1 w-72 z-[10001]">
    <div class="p-3 border-b border-gray-700">
      <h3 class="font-medium">Notifications</h3>
    </div>    
    <div class="max-h-80 overflow-y-auto" id="mobile-notification-list">
      <!-- Mobile notifications will be loaded dynamically -->
    </div>
  </div>
</body>
</html>
<style>
  #profile-dropdown {
    position: fixed;
    z-index: 100;
    min-width: 220px;
    border-radius: 8px;
    transition: all 0.2s ease;
    opacity: 1;
    transform: translateY(0);
    pointer-events: auto;
    width: auto;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.3);
    bottom: 80px;
    left: 15px;
  }
  #profile-dropdown.hidden {
    opacity: 0;
    transform: translateY(10px);
    pointer-events: none;
    display: block !important;
    visibility: hidden;
  }
  @media (max-width: 768px) {
    #profile-dropdown {
      min-width: 200px;
      right: 20px;
      left: auto;
      bottom: auto;
      top: 100px;
    }
  }
  .text-logout {
    color: #FF5555;
  }
  .text-logout:hover {
    color: #FF7777;
  }
  .kirim-tip-button {
    position: relative;
    border-radius: 5px;
    background: linear-gradient(45deg, #01935d, #01e304);
    transition: all 0.3s ease;
  }
  .kirim-tip-button:hover {
    transform: translateY(-1px);
    box-shadow: 0 4px 12px rgba(0, 168, 107, 0.3);
  }
  .kirim-tip-tooltip {
    position: absolute;
    bottom: 100%;
    right: 0;
    margin-bottom: 10px;
    opacity: 0;
    visibility: hidden;
    transition: opacity 0.3s, visibility 0.3s, transform 0.3s;
    transform: translateY(5px);
    z-index: 50;
    filter: drop-shadow(0 2px 5px rgba(0, 0, 0, 0.2));
  }
  .kirim-tip-button:hover .kirim-tip-tooltip {
    opacity: 1;
    visibility: visible;
    transform: translateY(0);
  }
  .tooltip-arrow {
    position: absolute;
    bottom: -6px;
    right: 10px;
    width: 12px;
    height: 12px;
    background-color: white;
    transform: rotate(45deg);
  }
  @media (max-width: 1023px) {
    body {
      padding-top: 16px;
    }
  }
  .bottom-nav-item {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    flex: 1;
    text-align: center;
    padding: 8px 0;
    color: #8F8F8F;
    position: relative;
    transition: color 0.2s ease;
  }
  .bottom-nav-item i {
    font-size: 22px;
    margin-bottom: 4px;
  }
  .bottom-nav-item span {
    font-size: 11px;
  }
  @media (max-width: 1023px) {
    .bottom-nav-item span {
      display: none;
    }
  }
  .bottom-nav-item:hover {
    color: #E5E5E5;
  }
  .bottom-nav-active {
    color: #0055FF;
  }
  .bottom-nav-active::before {
    content: '';
    position: absolute;
    top: 0;
    left: 50%;
    transform: translateX(-50%);
    width: 24px;
    height: 3px;
    background-color: #0055FF;
    border-radius: 0 0 4px 4px;
  }
  @media (max-width: 1023px) {
    .min-h-screen {
      padding-bottom: 80px !important;
    }
    #mobile-profile-popup.show {
      opacity: 1;
      transform: translateY(0);
      visibility: visible;
    }
  }
  #mobile-notification-popup.show {
    opacity: 1 !important;
    transform: translateY(0) !important;
    visibility: visible !important;
  }  #mobile-notification-popup {
    z-index: 10001;
    transition: all 0.2s ease-out;
    display: block !important;
    visibility: hidden;
    opacity: 0;
    transform: translateY(4px);
  }
  #mobile-notification-popup.hidden {
    display: none !important;
  }
  #notification-dropdown {
    transition: all 0.2s ease-out;
    opacity: 0;
    transform: translateY(4px);
    visibility: hidden;
  }
  #notification-dropdown.show {
    opacity: 1 !important;
    transform: translateY(0) !important;
    visibility: visible !important;
  }
</style>
<script>
  document.addEventListener('DOMContentLoaded', () => {
    const profileButton = document.getElementById('profile-menu-button');
    const profileDropdown = document.getElementById('profile-dropdown');
    if (!profileButton || !profileDropdown) return;
    profileButton.addEventListener('click', (e) => {
      e.stopPropagation();
      e.preventDefault();
      const isHidden = profileDropdown.classList.contains('hidden');
      profileDropdown.classList.toggle('hidden');
    });
    document.addEventListener('click', (e) => {
      const isClickInsideDropdown = profileDropdown.contains(e.target);
      const isClickOnButton = profileButton.contains(e.target);
      if (!isClickInsideDropdown && !isClickOnButton && !profileDropdown.classList.contains('hidden')) {
        profileDropdown.classList.add('hidden');
      }
    });
    profileDropdown.addEventListener('click', (e) => {
      e.stopPropagation();
    });
    const profileBtn = document.getElementById('mobile-profile-btn');
    const profilePopup = document.getElementById('mobile-profile-popup');
    if (profileBtn && profilePopup) {
      profileBtn.addEventListener('click', function (e) {
        e.preventDefault();
        e.stopPropagation();
        if (profilePopup.classList.contains('hidden')) {
          profilePopup.classList.remove('hidden');
          setTimeout(() => {
            profilePopup.classList.add('show');
          }, 10);
        } else {
          profilePopup.classList.remove('show');
          setTimeout(() => {
            profilePopup.classList.add('hidden');
          }, 200);
        }
      });
      document.addEventListener('click', function (e) {
        if (!profilePopup.classList.contains('hidden') &&
          !profileBtn.contains(e.target) &&
          !profilePopup.contains(e.target)) {
          profilePopup.classList.remove('show');
          setTimeout(() => {
            profilePopup.classList.add('hidden');
          }, 200);
        }
      });
    }    
    const notificationBtn = document.getElementById('notification-btn');
    const notificationDropdown = document.getElementById('notification-dropdown');
    if (notificationBtn && notificationDropdown) {
      notificationBtn.addEventListener('click', (e) => {
        e.stopPropagation();
        if (notificationDropdown.classList.contains('hidden')) {
          notificationDropdown.classList.remove('hidden');
          setTimeout(() => {
            notificationDropdown.classList.add('show');
          }, 10);
          markNotificationsAsRead();
        } else {
          notificationDropdown.classList.remove('show');
          setTimeout(() => {
            notificationDropdown.classList.add('hidden');
          }, 200);
        }
      });
      document.addEventListener('click', (e) => {
        const isClickInsideDropdown = notificationDropdown.contains(e.target);
        const isClickOnButton = notificationBtn.contains(e.target);
        if (!isClickInsideDropdown && !isClickOnButton && !notificationDropdown.classList.contains('hidden')) {
          notificationDropdown.classList.remove('show');
          setTimeout(() => {
            notificationDropdown.classList.add('hidden');
          }, 200);
        }
      });
      notificationDropdown.addEventListener('click', (e) => {
        e.stopPropagation();
      });
    }
    function loadNotifications() {
      fetchGitHubCommits();
    }

    let notificationCache = [];
    let lastFetchTime = 0;
    const CACHE_DURATION = 5 * 60 * 1000; 

    function formatTimeAgo(dateString) {
      const now = new Date();
      const commitDate = new Date(dateString);
      const diffInMs = now - commitDate;
      const diffInMinutes = Math.floor(diffInMs / (1000 * 60));
      const diffInHours = Math.floor(diffInMinutes / 60);
      const diffInDays = Math.floor(diffInHours / 24);

      if (diffInMinutes < 1) return 'Just now';
      if (diffInMinutes < 60) return `${diffInMinutes} minute${diffInMinutes > 1 ? 's' : ''} ago`;
      if (diffInHours < 24) return `${diffInHours} hour${diffInHours > 1 ? 's' : ''} ago`;
      if (diffInDays < 7) return `${diffInDays} day${diffInDays > 1 ? 's' : ''} ago`;
      
      return commitDate.toLocaleDateString('en-US', { 
        month: 'short', 
        day: 'numeric',
        year: commitDate.getFullYear() !== now.getFullYear() ? 'numeric' : undefined
      });
    }    function createNotificationHTML(commit) {
      const message = commit.commit.message.length > 60 
        ? commit.commit.message.substring(0, 60) + '...' 
        : commit.commit.message;
      
      return `
        <a href="${commit.html_url}" target="_blank" class="block px-4 py-3 border-b border-gray-700 hover:bg-dark-700 transition-colors">
          <div class="flex items-start gap-3">
            <div class="shrink-0">
              <div class="w-8 h-8 bg-blue-500/20 rounded-full flex items-center justify-center">
                <i class="ti ti-git-commit text-blue-400 text-sm"></i>
              </div>
            </div>
            <div class="flex-1 min-w-0">
              <div class="text-sm text-white font-medium mb-1">${message}</div>
              <div class="text-xs text-gray-400">
                by ${commit.commit.author.name} ‚Ä¢ ${formatTimeAgo(commit.commit.author.date)}
              </div>
            </div>
            <div class="shrink-0">
              <i class="ti ti-external-link text-gray-400 text-xs"></i>
            </div>
          </div>
        </a>
      `;
    }

    function updateNotificationUI(commits) {
      const desktopList = document.getElementById('notification-list');
      const mobileList = document.getElementById('mobile-notification-list');
      
      if (!commits || commits.length === 0) {
        const emptyHTML = `
          <div class="px-4 py-8 text-center text-gray-400">
            <i class="ti ti-inbox text-2xl mb-2"></i>
            <p class="text-sm">No recent updates</p>
          </div>
        `;
        if (desktopList) desktopList.innerHTML = emptyHTML;
        if (mobileList) mobileList.innerHTML = emptyHTML;
        return;
      }

      const notificationHTML = commits.slice(0, 3).map(createNotificationHTML).join('');
      
      if (desktopList) desktopList.innerHTML = notificationHTML;
      if (mobileList) mobileList.innerHTML = notificationHTML;
    }

    async function fetchGitHubCommits() {
      const now = Date.now();
      
      if (notificationCache.length > 0 && (now - lastFetchTime) < CACHE_DURATION) {
        updateNotificationUI(notificationCache);
        return;
      }

      try {
        const response = await fetch('https://api.github.com/repos/bangtutorial/streamflow/commits');
        
        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        const commits = await response.json();
        
        checkForNewCommits(commits);
        
        notificationCache = commits;
        lastFetchTime = now;
        
        updateNotificationUI(commits);
      } catch (error) {
        console.error('Error fetching GitHub commits:', error);
        
        const errorHTML = `
          <div class="px-4 py-6 text-center text-gray-400">
            <i class="ti ti-alert-circle text-xl mb-2"></i>
            <p class="text-sm">Unable to load updates</p>
            <p class="text-xs text-gray-500 mt-1">Check your internet connection</p>
          </div>
        `;
        
        const desktopList = document.getElementById('notification-list');
        const mobileList = document.getElementById('mobile-notification-list');
        if (desktopList) desktopList.innerHTML = errorHTML;
        if (mobileList) mobileList.innerHTML = errorHTML;
      }
    }

    function checkForNewCommits(commits) {
      if (!commits || commits.length === 0) return;
      
      const lastVisit = localStorage.getItem('lastNotificationCheck');
      const latestCommitDate = new Date(commits[0].commit.author.date);
      
      if (!lastVisit || new Date(lastVisit) < latestCommitDate) {
        showNotificationDot();
      } else {
        hideNotificationDot();
      }
    }

    function showNotificationDot() {
      const desktopDot = document.querySelector('#notification-btn .bg-red-500');
      const mobileDot = document.querySelector('#mobile-notification-btn .bg-red-500');
      
      if (desktopDot) desktopDot.classList.remove('hidden');
      if (mobileDot) mobileDot.classList.remove('hidden');
    }

    function hideNotificationDot() {
      const desktopDot = document.querySelector('#notification-btn .bg-red-500');
      const mobileDot = document.querySelector('#mobile-notification-btn .bg-red-500');
      
      if (desktopDot) desktopDot.classList.add('hidden');
      if (mobileDot) mobileDot.classList.add('hidden');
    }

    function markNotificationsAsRead() {
      localStorage.setItem('lastNotificationCheck', new Date().toISOString());
      hideNotificationDot();
    }

    fetchGitHubCommits();
    setInterval(fetchGitHubCommits, CACHE_DURATION);

    window.addEventListener('resize', function() {
      if (notificationDropdown && !notificationDropdown.classList.contains('hidden')) {
        notificationDropdown.classList.remove('show');
        setTimeout(() => {
          notificationDropdown.classList.add('hidden');
        }, 200);
      }
      
      if (mobileNotificationPopup && !mobileNotificationPopup.classList.contains('hidden')) {
        mobileNotificationPopup.classList.remove('show');
        setTimeout(() => {
          mobileNotificationPopup.classList.add('hidden');
        }, 200);
      }
    });
    const mobileNotificationBtn = document.getElementById('mobile-notification-btn');
    const mobileNotificationPopup = document.getElementById('mobile-notification-popup');
    if (mobileNotificationBtn && mobileNotificationPopup) {
      mobileNotificationBtn.addEventListener('click', function (e) {
        e.preventDefault();
        e.stopPropagation();
        const btnRect = mobileNotificationBtn.getBoundingClientRect();
        mobileNotificationPopup.style.top = '64px';
        mobileNotificationPopup.style.right = '10px';
        mobileNotificationPopup.style.left = 'auto';
        mobileNotificationPopup.style.bottom = 'auto';
        if (mobileNotificationPopup.classList.contains('hidden')) {
          mobileNotificationPopup.classList.remove('hidden');
          setTimeout(() => {
            mobileNotificationPopup.classList.add('show');
          }, 10);
          markNotificationsAsRead();
        } else {
          mobileNotificationPopup.classList.remove('show');
          setTimeout(() => {
            mobileNotificationPopup.classList.add('hidden');
          }, 200);
        }
      });
      document.addEventListener('click', function (e) {
        if (!mobileNotificationPopup.classList.contains('hidden') &&
          !mobileNotificationBtn.contains(e.target) &&
          !mobileNotificationPopup.contains(e.target)) {
          mobileNotificationPopup.classList.remove('show');
          setTimeout(() => {
            mobileNotificationPopup.classList.add('hidden');
          }, 200);
        }      
      });
    }
  });
</script>
